apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
//apply plugin: 'com.antfortune.freeline'

def buildTime() {
    def date = new Date();
    def formatDate = date.format('yyyyMMdd');
    return formatDate;
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        applicationId rootProject.ext.android.applicationId

        resConfigs "zh","en"//指定只支持中文和英文（默认是支持国际化的）


        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    //签名打包配置
    signingConfigs {
        outAPK {
            keyAlias 'key0'
            keyPassword '20171110'
            storeFile file('../doc//key/Ckey.jks')
            storePassword '20171110'
        }
        release {
            keyAlias 'key0'
            keyPassword '20171110'
            storeFile file('../doc//key/Ckey.jks')
            storePassword '20171110'
        }
    }
    //配置是否混淆和混淆文件和指定包生成目录和文件名
    buildTypes {
        debug {
            //shrinkResources false //打包时删除无用的资源
            signingConfig signingConfigs.release
        }
        release {
            signingConfig signingConfigs.release//配置打包签名
            minifyEnabled false//是否删除无用指令和方法
            //shrinkResources true //打包时删除无用的资源
            debuggable false//取消正式版本调试

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.outAPK
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith('.apk')
                            && 'release' == variant.buildType.name) {
                        def apkFile = new File("${output.outputFile.getParent()}/outapk/${buildTime()}",
                                "Kchaos_cm_${buildTime()}_v${variant.versionName}_release_${variant.flavorName}.apk")
                        output.outputFile = apkFile
                    }
                }
            }
        }
    }
//    freeline {
//        hack true
//        //如果你定义了productFlavor, 记得把下面的注释放开, 把{Your-productFlavor}替换成你相应的productFlavor
//        //productFlavor '{Your-productFlavor}'
//    }

    //多渠道打包 (渠道号配置)
    productFlavors {
        show_01_chann {}
        show_02_chann {}

        productFlavors.all {
                //配置全局渠道名生成

            flavor -> flavor.manifestPlaceholders = [NAME_VALUE: name]
        }
    }


    //忽略重复文件
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
//    //butterknife
//    compile rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    if (isModule.toBoolean()) {
        compile project(':lib_common')
    }else {
        compile project(':module_mine')
    }

    debugCompile rootProject.ext.dependencies["debugDb"]
}
